//
// VideoUpdatePayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoUpdatePayload: Codable, Hashable {

    /** The unique ID for the player you want to associate with your video. */
    public var playerId: NullableString?
    /** The title you want to use for your video. */
    public var title: String?
    /** A brief description of the video. */
    public var description: String?
    /** Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). */
    public var _public: Bool?
    /** Whether the video is a 360 degree or immersive video. */
    public var panoramic: Bool?
    /** Whether the player supports the mp4 format. */
    public var mp4Support: Bool?
    /** A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video. */
    public var tags: [String]?
    /** A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. */
    public var metadata: [Metadata]?

    public init(playerId: NullableString? = nil, title: String? = nil, description: String? = nil, _public: Bool? = nil, panoramic: Bool? = nil, mp4Support: Bool? = nil, tags: [String]? = nil, metadata: [Metadata]? = nil) {
        self.playerId = playerId
        self.title = title
        self.description = description
        self._public = _public
        self.panoramic = panoramic
        self.mp4Support = mp4Support
        self.tags = tags
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case playerId
        case title
        case description
        case _public = "public"
        case panoramic
        case mp4Support
        case tags
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(playerId, forKey: .playerId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(_public, forKey: ._public)
        try container.encodeIfPresent(panoramic, forKey: .panoramic)
        try container.encodeIfPresent(mp4Support, forKey: .mp4Support)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

