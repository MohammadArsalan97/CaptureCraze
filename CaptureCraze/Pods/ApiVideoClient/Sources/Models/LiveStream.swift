//
// LiveStream.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LiveStream: Codable, Hashable {

    /** The unique identifier for the live stream. Live stream IDs begin with \"li.\" */
    public var liveStreamId: String
    /** The name of your live stream. */
    public var name: String?
    /** The unique, private stream key that you use to begin streaming. */
    public var streamKey: String?
    /** Whether you are recording or not. */
    public var record: Bool?
    /** BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. */
    public var _public: Bool?
    public var assets: LiveStreamAssets?
    /** The unique identifier for the player. */
    public var playerId: String?
    /** Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not. */
    public var broadcasting: Bool?
    /** When the player was created, presented in ISO-8601 format. */
    public var createdAt: Date?
    /** When the player was last updated, presented in ISO-8601 format. */
    public var updatedAt: Date?

    public init(liveStreamId: String, name: String? = nil, streamKey: String? = nil, record: Bool? = nil, _public: Bool? = nil, assets: LiveStreamAssets? = nil, playerId: String? = nil, broadcasting: Bool? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.liveStreamId = liveStreamId
        self.name = name
        self.streamKey = streamKey
        self.record = record
        self._public = _public
        self.assets = assets
        self.playerId = playerId
        self.broadcasting = broadcasting
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case liveStreamId
        case name
        case streamKey
        case record
        case _public = "public"
        case assets
        case playerId
        case broadcasting
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(liveStreamId, forKey: .liveStreamId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(streamKey, forKey: .streamKey)
        try container.encodeIfPresent(record, forKey: .record)
        try container.encodeIfPresent(_public, forKey: ._public)
        try container.encodeIfPresent(assets, forKey: .assets)
        try container.encodeIfPresent(playerId, forKey: .playerId)
        try container.encodeIfPresent(broadcasting, forKey: .broadcasting)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

