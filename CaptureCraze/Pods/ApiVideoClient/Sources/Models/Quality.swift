//
// Quality.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Quality: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case hls = "hls"
        case mp4 = "mp4"
    }
    public enum Quality: String, Codable, CaseIterable {
        case _240p = "240p"
        case _360p = "360p"
        case _480p = "480p"
        case _720p = "720p"
        case _1080p = "1080p"
        case _2160p = "2160p"
    }
    public enum Status: String, Codable, CaseIterable {
        case waiting = "waiting"
        case encoding = "encoding"
        case encoded = "encoded"
        case failed = "failed"
    }
    /** The type of video (hls or mp4). */
    public var type: ModelType?
    /** The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p. */
    public var quality: Quality?
    /** The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded. */
    public var status: Status?

    public init(type: ModelType? = nil, quality: Quality? = nil, status: Status? = nil) {
        self.type = type
        self.quality = quality
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case quality
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

