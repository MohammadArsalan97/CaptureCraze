//
// VideoStatusEncodingMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoStatusEncodingMetadata: Codable, Hashable {

    /** The width of the video in pixels. */
    public var width: Int?
    /** The height of the video in pixels. */
    public var height: Int?
    /** The number of bits processed per second. */
    public var bitrate: Double?
    /** The length of the video. */
    public var duration: Int?
    /** The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps). */
    public var framerate: Int?
    /** How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz. */
    public var samplerate: Int?
    /** The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library.  */
    public var videoCodec: String?
    /** The method used to compress and decompress digital audio for your video. */
    public var audioCodec: String?
    public var aspectRatio: String?

    public init(width: Int? = nil, height: Int? = nil, bitrate: Double? = nil, duration: Int? = nil, framerate: Int? = nil, samplerate: Int? = nil, videoCodec: String? = nil, audioCodec: String? = nil, aspectRatio: String? = nil) {
        self.width = width
        self.height = height
        self.bitrate = bitrate
        self.duration = duration
        self.framerate = framerate
        self.samplerate = samplerate
        self.videoCodec = videoCodec
        self.audioCodec = audioCodec
        self.aspectRatio = aspectRatio
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case width
        case height
        case bitrate
        case duration
        case framerate
        case samplerate
        case videoCodec
        case audioCodec
        case aspectRatio
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(bitrate, forKey: .bitrate)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(framerate, forKey: .framerate)
        try container.encodeIfPresent(samplerate, forKey: .samplerate)
        try container.encodeIfPresent(videoCodec, forKey: .videoCodec)
        try container.encodeIfPresent(audioCodec, forKey: .audioCodec)
        try container.encodeIfPresent(aspectRatio, forKey: .aspectRatio)
    }
}

