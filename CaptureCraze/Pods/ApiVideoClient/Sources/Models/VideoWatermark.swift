//
// VideoWatermark.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoWatermark: Codable, Hashable {

    /** id of the watermark */
    public var id: String?
    /** Distance expressed in px or % between the top-border of the video and the watermark-image. */
    public var top: String?
    /** Distance expressed in px or % between the left-border of the video and the watermark-image. */
    public var _left: String?
    /** Distance expressed in px or % between the bottom-border of the video and the watermark-image. */
    public var bottom: String?
    /** Distance expressed in px or % between the right-border of the video and the watermark-image. */
    public var _right: String?
    /** Width of the watermark-image relative to the video if expressed in %. Otherwise a fixed width. NOTE: To keep intrinsic watermark-image width use initial */
    public var width: String?
    /** Width of the watermark-image relative to the video if expressed in %. Otherwise a fixed height. NOTE: To keep intrinsic watermark-image height use initial */
    public var height: String?
    /** Opacity expressed in % only to specify the degree of the watermark-image transparency with the video. */
    public var opacity: String?

    public init(id: String? = nil, top: String? = nil, _left: String? = nil, bottom: String? = nil, _right: String? = nil, width: String? = nil, height: String? = nil, opacity: String? = nil) {
        self.id = id
        self.top = top
        self._left = _left
        self.bottom = bottom
        self._right = _right
        self.width = width
        self.height = height
        self.opacity = opacity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case top
        case _left = "left"
        case bottom
        case _right = "right"
        case width
        case height
        case opacity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(top, forKey: .top)
        try container.encodeIfPresent(_left, forKey: ._left)
        try container.encodeIfPresent(bottom, forKey: .bottom)
        try container.encodeIfPresent(_right, forKey: ._right)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(opacity, forKey: .opacity)
    }
}

