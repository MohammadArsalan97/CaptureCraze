//
// VideoCreationPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoCreationPayload: Codable, Hashable {

    /** The title of your new video. */
    public var title: String
    /** A brief description of your video. */
    public var description: String?
    /** You can either add a video already on the web, by entering the URL of the video, or you can also enter the `videoId` of one of the videos you already have on your api.video acccount, and this will generate a copy of your video. Creating a copy of a video can be especially useful if you want to keep your original video and trim or apply a watermark onto the copy you would create. */
    public var source: String?
    /** Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). */
    public var _public: Bool? = true
    /** Indicates if your video is a 360/immersive video. */
    public var panoramic: Bool? = false
    /** Enables mp4 version in addition to streamed version. */
    public var mp4Support: Bool? = true
    /** The unique identification number for your video player. */
    public var playerId: String?
    /** A list of tags you want to use to describe your video. */
    public var tags: [String]?
    /** A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata). */
    public var metadata: [Metadata]?
    public var clip: VideoClip?
    public var watermark: VideoWatermark?

    public init(title: String, description: String? = nil, source: String? = nil, _public: Bool? = true, panoramic: Bool? = false, mp4Support: Bool? = true, playerId: String? = nil, tags: [String]? = nil, metadata: [Metadata]? = nil, clip: VideoClip? = nil, watermark: VideoWatermark? = nil) {
        self.title = title
        self.description = description
        self.source = source
        self._public = _public
        self.panoramic = panoramic
        self.mp4Support = mp4Support
        self.playerId = playerId
        self.tags = tags
        self.metadata = metadata
        self.clip = clip
        self.watermark = watermark
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case description
        case source
        case _public = "public"
        case panoramic
        case mp4Support
        case playerId
        case tags
        case metadata
        case clip
        case watermark
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(_public, forKey: ._public)
        try container.encodeIfPresent(panoramic, forKey: .panoramic)
        try container.encodeIfPresent(mp4Support, forKey: .mp4Support)
        try container.encodeIfPresent(playerId, forKey: .playerId)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(clip, forKey: .clip)
        try container.encodeIfPresent(watermark, forKey: .watermark)
    }
}

